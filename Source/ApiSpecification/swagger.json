{
  "openapi" : "3.0.0",
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/kirypto/TimelineTracker/1.0.0"
  } ],
  "info" : {
    "version" : "0.1.0",
    "title" : "Timeline Tracker API",
    "license" : {
      "url" : "https://github.com/kirypto/TimelineTracker/blob/master/LICENSE.txt",
      "name" : "GNU General Public License v3.0"
    },
    "contact" : {
      "url" : "https://github.com/kirypto/TimelineTracker/issues",
      "name" : "kirypto"
    }
  },
  "paths" : {
    "/api/location" : {
      "post" : {
        "summary" : "Creates a new Location",
        "description" : "Creates a new Location with a generated id and returns it.\n",
        "tags" : [ "Locations" ],
        "requestBody" : {
          "required" : true,
          "description" : "*Notes*\n- *When POSTing a Location, providing an id is not required as it will\nbe generated. If one is provided it will be ignored.*\n- *For each of the ranges making up the span field, either the range\nobject or a single value can be provided. If a sinlge value is\nprovided, it will be used as both the lower and higher value of the\nrange.*\n",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewLocation"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExistingLocation"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations" : {
      "get" : {
        "summary" : "Retrieves all Locations",
        "tags" : [ "Locations" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "name",
          "description" : "Filters to Locations with the queried name",
          "schema" : {
            "type" : "string"
          },
          "example" : "The Great Pyramid"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LocationIds"
                }
              }
            }
          }
        }
      }
    },
    "/api/location/{locationId}" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "locationId",
        "schema" : {
          "$ref" : "#/components/schemas/LocationId"
        },
        "required" : true
      } ],
      "get" : {
        "summary" : "Retrieves the specified Location",
        "tags" : [ "Locations" ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExistingLocation"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified Location",
        "tags" : [ "Locations" ],
        "responses" : {
          "204" : {
            "description" : "Successfully removed"
          }
        }
      },
      "patch" : {
        "summary" : "Modifies the specified Location",
        "tags" : [ "Locations" ],
        "requestBody" : {
          "required" : true,
          "description" : "*Notes*\n- *Modifying the id is not permitted.*\n",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully modified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExistingLocation"
                }
              }
            }
          }
        }
      }
    },
    "/api/location/{locationId}/timeline" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "locationId",
        "schema" : {
          "$ref" : "#/components/schemas/LocationId"
        },
        "required" : true
      } ],
      "get" : {
        "summary" : "Retrieves the specified Location's Timeline",
        "tags" : [ "Locations" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "eventsTaggedAll",
          "description" : "Comma separated list of tags. Filters timeline to inlcude events which have all of the specified tags.",
          "schema" : {
            "type" : "string"
          },
          "example" : "important,unimportant"
        }, {
          "in" : "query",
          "name" : "eventsTaggedAny",
          "description" : "Comma separated list of tags. Filters timeline to include events which have at least one of the specified tags.",
          "schema" : {
            "type" : "string"
          },
          "example" : "important,unimportant"
        }, {
          "in" : "query",
          "name" : "eventsTaggedOnly",
          "description" : "Comma separated list of tags. Filters timeline to include events which are only tagged with the specified tags _(or a subset of them)_.",
          "schema" : {
            "type" : "string"
          },
          "example" : "important,unimportant"
        }, {
          "in" : "query",
          "name" : "eventsTaggedNone",
          "description" : "Comma separated list of tags. Filters timeline to include events which have none of the of the specified tags.",
          "schema" : {
            "type" : "string"
          },
          "example" : "important,unimportant"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LocationTimeline"
                }
              }
            }
          }
        }
      }
    },
    "/api/traveler" : {
      "post" : {
        "summary" : "Creates a new Traveler",
        "description" : "Creates a new Traveler with a generated id and returns it.\n",
        "tags" : [ "Travelers" ],
        "requestBody" : {
          "required" : true,
          "description" : "*Notes*\n- *When POSTing a Traveler, providing an id is not required as it will\nbe generated. If one is provided it will be ignored.*\n",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewTraveler"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created  \n*Notes*\n- *When first created, the journey will be empty.*\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExistingTraveler"
                }
              }
            }
          }
        }
      }
    },
    "/api/travelers" : {
      "get" : {
        "summary" : "Retrieves all Travelers",
        "tags" : [ "Travelers" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "name",
          "description" : "Filters to Travelers with the queried name",
          "schema" : {
            "type" : "string"
          },
          "example" : "James T. Kirk"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TravelerIds"
                }
              }
            }
          }
        }
      }
    },
    "/api/traveler/{travelerId}" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "travelerId",
        "schema" : {
          "$ref" : "#/components/schemas/TravelerId"
        },
        "required" : true
      } ],
      "get" : {
        "summary" : "Retrieves the specified Location",
        "tags" : [ "Travelers" ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExistingTraveler"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified Traveler",
        "tags" : [ "Travelers" ],
        "responses" : {
          "204" : {
            "description" : "Successfully removed"
          }
        }
      },
      "patch" : {
        "summary" : "Modifies the specified Traveler",
        "tags" : [ "Travelers" ],
        "requestBody" : {
          "required" : true,
          "description" : "*Notes*\n- *Modifying the id is not permitted.*\n",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully modified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExistingTraveler"
                }
              }
            }
          }
        }
      }
    },
    "/api/traveler/{travelerId}/timeline" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "travelerId",
        "schema" : {
          "$ref" : "#/components/schemas/TravelerId"
        },
        "required" : true
      } ],
      "get" : {
        "summary" : "Retrieves the specified Traveler's Timeline",
        "tags" : [ "Travelers" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "includeEventsTaggedWithAnyOf",
          "description" : "Comma separated list of tags. Filters timeline Events to only those which have at least one of the specified tags.",
          "schema" : {
            "type" : "string"
          },
          "example" : "important,unimportant"
        }, {
          "in" : "query",
          "name" : "includeEventsTaggedWithAllOf",
          "description" : "Comma separated list of tags. Filters timeline Events to only those which have all of the specified tags.",
          "schema" : {
            "type" : "string"
          },
          "example" : "important,unimportant"
        }, {
          "in" : "query",
          "name" : "excludeEventsTaggedWithAnyOf",
          "description" : "Comma separated list of tags. Filters timeline Events to only those which do not have any of the specified tags.",
          "schema" : {
            "type" : "string"
          },
          "example" : "important,unimportant"
        }, {
          "in" : "query",
          "name" : "excludeEventsTaggedWithAllOf",
          "description" : "Comma separated list of tags. Filters timeline Events to only those which do not have all of the specified tags.",
          "schema" : {
            "type" : "string"
          },
          "example" : "important,unimportant"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TravelerTimeline"
                }
              }
            }
          }
        }
      }
    },
    "/api/event" : {
      "post" : {
        "summary" : "Creates a new Event",
        "description" : "Creates a new Event with a generated id and returns it.\n",
        "tags" : [ "Events" ],
        "requestBody" : {
          "required" : true,
          "description" : "*Notes*\n- *When POSTing an Event, providing an id is not required as it will\nbe generated. If one is provided it will be ignored.*\n- *Either a location or a position must be included, but must not have\nboth.*\n",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewEvent"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExistingEvent"
                }
              }
            }
          }
        }
      }
    },
    "/api/events" : {
      "get" : {
        "summary" : "Retrieves all events",
        "tags" : [ "Events" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "name",
          "description" : "Filters to Events with the queried name",
          "schema" : {
            "type" : "string"
          },
          "example" : "Skirmish in the market"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TravelerIds"
                }
              }
            }
          }
        }
      }
    },
    "/api/events/{eventId}" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "eventId",
        "schema" : {
          "$ref" : "#/components/schemas/EventId"
        },
        "required" : true
      } ],
      "get" : {
        "summary" : "Retrieves the specified Event",
        "tags" : [ "Events" ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExistingEvent"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified Event",
        "tags" : [ "Events" ],
        "responses" : {
          "204" : {
            "description" : "Successfully removed"
          }
        }
      },
      "patch" : {
        "summary" : "Modifies the specified Event",
        "tags" : [ "Events" ],
        "requestBody" : {
          "required" : true,
          "description" : "*Notes*\n- *Modifying the id is not permitted.*\n",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully modified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExistingEvent"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "BaseLocation" : {
        "description" : "A place of significance that travelers can visit and events can occur at which cover a multi-dimensional area.  \nMost locations will consist of an area that spans 4 of the 5 dimensions;\n- Ranges for dimensions 1-3 representing the physical area.\n- A range for dimension 4 representing the time range from when it was constructed to when it will be no more. \n- A instantaneous range for dimension 5 _(lower and higher values are the same)_.\n",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "The Great Pyramid"
          },
          "description" : {
            "type" : "string",
            "example" : "A great triangular structure in Egypt constructed long ago.\n"
          },
          "span" : {
            "$ref" : "#/components/schemas/PositionalRange"
          }
        },
        "required" : [ "name", "description", "span" ]
      },
      "NewLocation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseLocation"
        } ]
      },
      "ExistingLocation" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "id" : {
              "$ref" : "#/components/schemas/LocationId"
            }
          }
        }, {
          "$ref" : "#/components/schemas/BaseLocation"
        } ],
        "required" : [ "id" ]
      },
      "BaseTraveler" : {
        "description" : "A person or thing which has a journey consisting of the positions it visits. A traveler can interact with other travelers and locations via events.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "James T. Kirk"
          },
          "description" : {
            "type" : "string",
            "example" : "He is captain of the NCC-1701 Starship Enterprise, and leads an ongoing mission to explore strange new worlds, to seek out new life and new civilizations, and to boldly go where no one has gone before."
          }
        },
        "required" : [ "name", "description" ]
      },
      "NewTraveler" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseTraveler"
        }, {
          "type" : "object",
          "properties" : {
            "initialPosition" : {
              "$ref" : "#/components/schemas/Position"
            }
          }
        } ],
        "required" : [ "initialPosition" ]
      },
      "ExistingTraveler" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "id" : {
              "$ref" : "#/components/schemas/TravelerId"
            }
          }
        }, {
          "$ref" : "#/components/schemas/BaseTraveler"
        }, {
          "type" : "object",
          "properties" : {
            "journey" : {
              "$ref" : "#/components/schemas/Journey"
            },
            "tags" : {
              "$ref" : "#/components/schemas/Tags"
            }
          }
        } ],
        "required" : [ "id", "journey" ]
      },
      "BaseEvent" : {
        "description" : "An interaction, connection, or other thing which happens across a dimensional range and optionally includes travelers and/or locations. Most events have at least one traveler, indicating that the event affected or included those travelers. Events without any travelers are supported but must still have a position or location _(for example a natural disaster in a remote area)_.\n- An event can have zero or more locations. The locations' spans must intersect the event.\n- An event can have zero or more travelers. The travelers' journeys must intersect the event.\n",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "Skirmish in the market"
          },
          "description" : {
            "type" : "string",
            "example" : "Attacked by the Briggand Band, the civilians ran in despair until the courageous Band Of Defenders came to the rescue."
          },
          "span" : {
            "$ref" : "#/components/schemas/PositionalRange"
          },
          "locations" : {
            "$ref" : "#/components/schemas/LocationIds"
          },
          "travelers" : {
            "$ref" : "#/components/schemas/TravelerIds"
          }
        },
        "required" : [ "name", "description", "span", "locations", "travelers" ]
      },
      "NewEvent" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseEvent"
        } ]
      },
      "ExistingEvent" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "id" : {
              "$ref" : "#/components/schemas/EventId"
            }
          }
        }, {
          "$ref" : "#/components/schemas/BaseEvent"
        }, {
          "type" : "object",
          "properties" : {
            "tags" : {
              "$ref" : "#/components/schemas/Tags"
            }
          }
        } ],
        "required" : [ "id" ]
      },
      "LocationId" : {
        "description" : "A unique identifier for a Location",
        "type" : "string",
        "format" : "prefixed-uuid",
        "example" : "location-abad1dea-0000-4000-0000-000000000000"
      },
      "TravelerId" : {
        "description" : "A unique identifier for a Traveler",
        "type" : "string",
        "format" : "prefixed-uuid",
        "example" : "traveler-abad1dea-0000-4000-0000-000000000000"
      },
      "EventId" : {
        "description" : "A unique identifier for a Event",
        "type" : "string",
        "format" : "prefixed-uuid",
        "example" : "event-abad1dea-0000-4000-0000-000000000000"
      },
      "LocationIds" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/LocationId"
        }
      },
      "TravelerIds" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/TravelerId"
        }
      },
      "TravelerTimeline" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/PositionOrEventId"
        }
      },
      "LocationTimeline" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/EventId"
        }
      },
      "Journey" : {
        "description" : "A sequence of positional transitions.",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/PositionalTransition"
        },
        "example" : [ {
          "position" : {
            "latitude" : -10.9378,
            "longitude" : -8.61222,
            "altitude" : 816.72,
            "continuum" : 737194.31,
            "reality" : 1
          },
          "transition" : "Jump"
        } ]
      },
      "Range" : {
        "description" : "A single-dimensional range with a lower and higher value.",
        "type" : "object",
        "properties" : {
          "lower" : {
            "type" : "number",
            "format" : "float",
            "example" : -5
          },
          "higher" : {
            "type" : "number",
            "format" : "float",
            "example" : 15
          }
        },
        "required" : [ "lower", "higher" ]
      },
      "PositionalRange" : {
        "description" : "A multi-dimensional range, with a range for each dimension.",
        "type" : "object",
        "properties" : {
          "latitudeRange" : {
            "$ref" : "#/components/schemas/Range"
          },
          "longitudeRange" : {
            "$ref" : "#/components/schemas/Range"
          },
          "altitudeRange" : {
            "$ref" : "#/components/schemas/Range"
          },
          "continuumRange" : {
            "$ref" : "#/components/schemas/Range"
          },
          "realityRange" : {
            "$ref" : "#/components/schemas/Range"
          }
        },
        "required" : [ "latitudeRange", "longitudeRange", "altitudeRange", "continuumRange", "realityRange" ]
      },
      "Position" : {
        "description" : "A multi-dimensional point, currently intended to support up to the 5th dimension.\n- Dimensions 1-3 => typical coordinate system consisting of latitude, longitude, and height relative to sea level.\n- Dimension 4 => \"time\" or \"duration\", the time that the position is tied to.\n- Dimension 5 => \"decision space\" or \"alternate realities\" which may be jumped between.\n",
        "type" : "object",
        "properties" : {
          "latitude" : {
            "type" : "number",
            "format" : "float",
            "example" : -10.9378
          },
          "longitude" : {
            "type" : "number",
            "format" : "float",
            "example" : -8.61222
          },
          "altitude" : {
            "type" : "number",
            "format" : "float",
            "example" : 816.72
          },
          "continuum" : {
            "type" : "number",
            "format" : "float",
            "example" : 737194.31
          },
          "reality" : {
            "type" : "integer",
            "format" : "int",
            "example" : 1
          }
        },
        "required" : [ "latitude", "longitude", "altitude", "continuum", "reality" ]
      },
      "PositionalTransition" : {
        "description" : "A combination of a position and a type of transition which describe how the transition from the previous position to this position is made.\n- 3DInterpolation => The position smoothly interpolates the position in dimensions 1 through 3. The position's 4th and 5th dimension values must be identical to the previous point.\n- InstantaneousJump => The earlier position is used to \"infill\" all possible queries between two points in a sequence until the latter position is reached, at which time the latter position is instantaneously used.\n",
        "type" : "object",
        "properties" : {
          "position" : {
            "$ref" : "#/components/schemas/Position"
          },
          "transition" : {
            "type" : "string",
            "enum" : [ "3DInterpolation", "InstantaneousJump" ],
            "example" : "IntantaneousJump"
          }
        },
        "required" : [ "position", "transition" ]
      },
      "Tag" : {
        "description" : "Alpha-numeric string to allow custom categorization for Travelers, Locations, and Events.",
        "type" : "string",
        "example" : "important"
      },
      "Tags" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Tag"
        }
      },
      "PositionOrEventId" : {
        "type" : "object",
        "oneOf" : [ {
          "$ref" : "#/components/schemas/Position"
        }, {
          "$ref" : "#/components/schemas/EventId"
        } ]
      },
      "PatchRequest" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/PatchDocument"
        }
      },
      "PatchDocument" : {
        "description" : "A JSONPatch document as defined by RFC 6902.",
        "required" : [ "op", "path" ],
        "properties" : {
          "op" : {
            "type" : "string",
            "description" : "The operation to be performed.",
            "enum" : [ "add", "remove", "replace", "move", "copy", "test" ],
            "example" : "add"
          },
          "path" : {
            "type" : "string",
            "description" : "The path to the sub-resource to modify relative to the main resource.\n"
          },
          "value" : {
            "type" : "object",
            "description" : "The value to be used within the operations."
          },
          "from" : {
            "type" : "string",
            "description" : "A string containing a JSON Pointer value."
          }
        },
        "example" : {
          "op" : "add",
          "path" : "/name",
          "value" : "James T. Kirk"
        }
      }
    }
  },
  "tags" : [ {
    "name" : "Locations",
    "description" : "Requests regarding Location resources."
  }, {
    "name" : "Travelers",
    "description" : "Requests regarding Travelers resources."
  } ]
}